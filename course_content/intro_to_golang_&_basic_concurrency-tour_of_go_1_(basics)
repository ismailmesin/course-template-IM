Unit_name: Intro to Golang & Basic Concurrency
Page_name: Tour of Go 1 (Basics)

1. What is the correct way to write a "Hello world!" program in Go?

    A) `print "Hello world!"`
    - Incorrect. While 'print' is a programming construct in various languages such as Python, Go uses a different approach for printed output to the console. Remember the "fmt" package and the structure of a Go program.
  
    B) `fmt.Println("Hello world!")`
    - Incorrect. Although this line of code would indeed print "Hello world!", it's floating in space. A Go program needs certain structural elements to work. What might those be?
    
    C) ``` go
        package main 
        import "fmt"
        func main() {
            fmt.Println("Hello world!")
        }
        ```
    - Correct. Every Golang program starts with a package declaration. If we're making a standalone executable, as in this case, we usually use package main. Our program also has a main function - this is where execution will start.

2. How do you declare and initialize a variable `x` of type int to the value `5` in Go?

    A) `x = 5`
    - Incorrect. In Go, variables need to be declared before they can be used, even if you're immediately assigning them a value. How would you declare a variable properly?
    
    B) `var x = 5`
    - Correct. This declares a variable 'x' and assigns the value 5. Go will automatically infer it's an int because 5 is an integer. Alternatively, you could explicitly define the type by writing `var x int = 5`.
  
    C) `var int x = 5`
    - Incorrect. Almost there, but the order is important. In Go, the type comes after the variable name when you are declaring a new variable.

3. What will be the output of the following Go code? 
    ``` go
    package main 
    import "fmt"
    func main() {
        var x int = 5
        x = 10
        fmt.Println(x)
    }
    ```

    A) 5
    - Incorrect. Look closely at the series of operations on `x`. It's initially assigned a value of 5, but then what happens?
    
    B) 10
    - Correct. Initially, `x` is assigned the value of 5. But with `x = 10`, it gets reassigned the value 10 before it's printed, so 10 is the output.
  
    C) Error
    - Incorrect. There's nothing in this code snippet that would cause an error. Go allows you to change the value of a variable within its scope. Can you find the line where `x`'s value is changed?

1. Which statement is accurate about strings in Go programming language?

    A) Strings are mutable
    - Incorrect. Unlike some other languages, Go strings are immutable; once created, they cannot be changed. They consist of individual bytes, not characters.   
  
    B) Strings can contain any type of data
    - Incorrect. In Go, strings consist of individual bytes.
    
    C) Strings in Go consist of individual bytes
    - Correct. Go strings comprise individual bytes, and they are immutable.

2. What differentiates a signed integer from an unsigned integer in Go?

    A) A signed integer can be complex, while an unsigned one can't
    - Incorrect. Both signed and unsigned integers in Go represent real numbers. The distinction is that signed integers can represent both negative and positive values, unlike unsigned ones. 
        
    B) A signed integer includes an encryption, while an unsigned one doesn't
    - Incorrect. The distinction between signed and unsigned integers relates to their ability to represent negative values, not encryption.
    
    C) A signed integer can represent negative and positive values, while an unsigned one can only represent positive values
    - Correct. A signed integer in Go can represent both positive and negative values, whereas an unsigned integer can only represent positive values.

3. In the context of Golang, what exactly is a pointer?

    A) A type of loop
    - Incorrect. A pointer does not represent any looping construct. In Go, it is an address pointing to a memory location.
    
    B) A function that points to a certain part of the code
    - Incorrect. A pointer refers to a memory location, not a section of the code. 

    C) An address that leads to a certain memory location
    - Correct. A pointer in Go is an address that points to a specific memory location.

4. How are boolean predeclared types distinguished in Golang?

    A) 1 and 0
    - Incorrect. In Golang, boolean types are pre-declared as 'True' and 'False', analytical to binary attributes but not represented as 1 and 0.
    
    B) Yes and No
    - Incorrect. In Golang, true and false replace the conventional 'Yes' and 'No' binary attributes.
    
    C) True and False
    - Correct. In Golang, boolean types are pre-declared as 'True' and 'False'.

5. What is one of the characteristics of an array in Golang? 

    A) Its length can be altered after its declaration
    - Incorrect. The length of an array in Golang is determined when it is declared and remains fixed.
        
    B) Its length is set and can not be changed after its declaration
    - Correct. In Golang, the length of an array is set during declaration and remains fixed.

    C) It can only contain elements of different types
    - Incorrect. An array in Golang is created with a set length and designed to hold elements of the same type.

6. Examine the following code snippet: `var intVar int = 15`. What type of variable is `intVar`?

    A) Boolean
    - Incorrect. `intVar` is not a boolean type. It's explicitly declared as an integer (`int`).
    
    B) Float
    - Incorrect. `intVar` is not a floating-point number. It's explicitly declared as an integer (`int`).

    C) Int
    - Correct. `intVar` is explicitly declared as an integer (`int`).

7. Review the code snippet: `str := "Golang"`. What type of data is assigned to `str`?

    A) String
    - Correct. In Go, the `:=` operator automatically infers the type from the value on the right hand side, so `str` is a string. 
  
    B) Int
    - Incorrect. `str` is not an integer. It's a string, as indicated by the quotation marks enclosing "Golang".

    C) Character
    - Incorrect. `str` is a string, not a single character. In Go, single characters and strings are distinct types.

8. Given the code: `var a int = 5; b := &a`. What type is variable `b`?

    A) Int
    - Incorrect. While `b` is related to an integer, `b` is a pointer to an integer, not an integer itself.
    
    B) String
    - Incorrect. `b` holds an address to a memory location, not a string of text.

    C) Pointer to an Int
    - Correct. By using the '&' operator in the declaration of `b`, we make a 'pointer', which contains the memory address of `a`.

9. Consider the declaration: `arr := [3]int{1, 2, 3}`. What is the length of `arr`?

    A) 3
    - Correct. The array `arr` is declared with three elements, which also determines its length.
    
    B) 2
    - Incorrect. The array `arr` is initialized with three elements, not two.
    
    C) 4
    - Incorrect. The number of elements succeeded by the equals sign determines the length of array `arr`â€”which in this case, is 3, not 4.

10. Evaluate the code snippet: `boolVar := true`. What is the type of `boolVar`?

    A) Int
    - Incorrect. `boolVar` is not an integer. It is inferred as a boolean from the true/false value assigned to it.
    
    B) String
    - Incorrect. `boolVar` is not a string. It is inferred as a boolean from the true/false value assigned to it.

    C) Boolean
    - Correct. The `:=` operator in Go infers the type based on the assigned value, so `boolVar` is inferred as a boolean since it's assigned the value `true`.

1. In this Golang code block, what is missing? 
   ```go
   if score > 90 {
       fmt.Println("Excellent")
   } else 
       fmt.Println("Good job")
   ```
    A) There is no error in this block
    - Incorrect. There seems to be a missing part. Check again.
  
    B) Before `else`, a closing curly brace `{}` is missing
    - Correct. The if part always needs a closing curly brace `}` before starting the `else` section.

    C) `else` should be replaced with `else if score > 80`
    - Incorrect. While it's an option, the error lies in the missing curly brace of the previous `if` statement.

2. Which statement would you use when you need to exit a `for` loop when a certain condition is met?

    A) `continue`
    - Incorrect. `continue` is used to skip current iteration and move to next, not to exit the loop.

    B) `exit`
    - Incorrect. There isn't an `exit` statement in Golang.

    C) `break`
    - Correct. `break` immediately exits the closest enclosing loop.

3. In Golang, how would you write a loop that executes indefinitely until stopped from inside the loop?

    A) `for {}`
    - Correct. A `for` loop with no initialisation, condition or post statement will execute indefinitely.

    B) `for ;;`
    - Incorrect. While this is valid in some languages for an infinite loop, it is not correct syntax for Golang.

    C) `while true {}`
    - Incorrect. Golang does not have a `while` keyword.

4. Which statement do you need to write when you need to return from a function without executing the remaining commands?

    A) `exit()`
    - Incorrect. `exit()` is not used to skip remaining commands in a function.

    B) `return`
    - Correct. A `return` statement makes the function stop its execution and optionally return a value.

    C) `break`
    - Incorrect. `break` is primarily used in loops, not in functions to stop execution.

5. In a `switch`, how do you handle the situation where none of the cases match?

    A) `default`
    - Correct. The `default` case in a `switch` statement handles the situation where no other cases match.

    B) `finally`
    - Incorrect. `finally` is not a keyword in Golang.

    C) `else`
    - Incorrect. `else` is used in `if` statements, not with `switch`.

6. Which statement is used to skip the current iteration of a loop and immediately start the next iteration?

    A) `break`
    - Incorrect. `break` stops the entire loop, it does not start the next iteration.

    B) `continue`
    - Correct. The `continue` statement ends the current loop iteration and immediately starts the next one.

    C) `pass`
    - Incorrect. The `pass` keyword does not exist in Golang.

7. Consider the following code snippet:
   ```go
   for i := 0; i < 10; i++ {
       if i % 2 == 0 {
	       // missing statement here
       }
   }
   ```
   What keyword is missing if the program should skip even numbers?

    A) `break`
    - Incorrect. `break` would end the loop entirely at the first even number.

    B) `return`
    - Incorrect. `return` does not work this way in Golang. It's used to return a value from a function and stop execution.

    C) `continue`
    - Correct. `continue` in the `if` statement would skip the current iteration at even numbers.

8. The `goto` statement in Golang is primarily used for what purpose?

    A) To jump around in code regardless of function boundaries
    - Incorrect. `goto` can only jump within the same function.

    B) To create loops
    - Incorrect. Although `goto` can theoretically create loops, such a usage is discouraged in Go. Native loop syntax with `for` should be used instead.

    C) To jump to a labeled statement within the same function
    - Correct. `goto` transfers control to a named label within the same function.

9. Suppose you have several cases to check against a single variable. Which control flow structure is most appropriate?

    A) `if...else if...else` chain
    - Incorrect. While this technically could work, there exists a more idiomatic structure in Golang for multiple case checking.

    B) `switch` statement
    - Correct. A `switch` statement is the most appropriate and idiomatic way to check multiple cases against a single variable in Go.

    C) `for` loop
    - Incorrect. A `for` loop isn't typically used to check multiple cases against a variable. It's used to repeat a block of code.

10. How do you create a loop in Go that operates in the style of a traditional `do...while loop`?

    A) With a `while` keyword
    - Incorrect. `while` isn't a keyword in Go, unlike some other languages.

    B) Using a `for` loop with the checking condition at the end
    - Correct. A `for` loop can be set up in such a way that it resembles a `do...while` loop, by putting the condition to stay in the loop at the end.

    C) Using an `if...else` structure inside a `for` loop
    - Incorrect. While this would technically work, it doesn't create a traditional `do...while` loop. The checking condition is usually at the end, after some code execution which is possible with `for`.