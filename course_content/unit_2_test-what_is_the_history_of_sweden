Unit_name: Unit 2 test
Page_name: What is the history of Sweden?

1. While working with goroutines in Go, how will you explain their concept to a programming beginner?

    A) They are like threads, but managed by the operating system, and one goroutine corresponds to one system thread.
    - Incorrect. The concept is close but goroutines are managed by Go runtime, not the operating system.
    B) They are lines of execution within a program, independent yet lightweight, which can run concurrently.
    - Correct. Goroutines are indeed lightweight threads of execution that allow different functions or methods to run concurrently.
    C) They are special methods used specifically for synchronization in a program.
    - Incorrect. While synchronization is a key aspect of concurrent programming, goroutines themselves are not methods for synchronization. 

2. How would you differentiate a channel in Go from other data types?
    A) It is a data type but only works as a storage unit for information.
    - Incorrect. A channel is not just a static storage unit, it provides a mechanism for synchronization and communication between goroutines.
    B) It is an exclusive data type that allows goroutines to communicate and synchronize.
    - Correct. Channels are indeed meant for facilitating communication between goroutines.
    C) It is a data type that holds a sequence of bytes, like a string data type.
    - Incorrect. A channel is indeed a data type, however, it doesn't simply hold a sequence of bytes. It's used for synchronization and communication between goroutines.

3. If a colleague asked you, "What does the 'select' statement do in Go?" How would you respond?
    A) It makes anyone goroutine run faster than others.
    - Incorrect. The 'select' statement doesn't affect the processing speed of goroutines but helps manage multiple channels.
    B) It is a special kind of switch statement used in Go.
    - Incorrect. While both select and switch statements allow for multiple conditions, the 'select' statement specifically allows a goroutine to wait on multiple channel operations.
    C) It allows a goroutine to wait upon multiple channel operations.
    - Correct. The 'select' statement does exactly what is mentioned here - it waits for multiple channel operations.

4. What mechanism does Go employ to accomplish parallelism?
    A) It relies entirely on the large number of goroutines created.
    - Incorrect. Having numerous goroutines does help achieve concurrency but parallelism also depends on the hardware - particularly the number of processor cores.
    B) It runs goroutines across different processor cores simultaneously.
    - Correct. Parallelism is indeed achieved when goroutines are run across different processor cores.  
    C) It uses the 'select' statement to ensure parallel execution of goroutines.
    - Incorrect. Though 'select' is crucial for managing channel communications, it doesn't directly facilitate parallelism in Go.

5. How would you describe the default nature of channels in Go to a peer, emphasizing their directional feature?
    A) Channels are unidirectional, only capable of sending or receiving values.
    - Incorrect. Channels in Go are not unidirectional by default. They can perform both sending and receiving operations.   
    B) Channels are bidirectional, having the ability to send and receive values.
    - Correct. Channels in Go are indeed bidirectional by default.    
    C) Channels have no directionality, they just serve as storage for values.
    - Incorrect. Channels are not merely storage for values; their main functionality includes sending and receiving, hence they possess directionality.
